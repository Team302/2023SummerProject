// clang-format off
//====================================================================================================================================================
// Copyright 2023 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 1.1.0.0
// Generated on Friday, December 1, 2023 6:29:53 AM

// FRC Includes
#include <networktables/NetworkTableInstance.h>
#include "hw/interfaces/IDragonMotorController.h"

#include "frontIntake_gen.h"

frontIntake_gen::frontIntake_gen()
{
	m_ntName = "frontIntake";
	mainWheel = new DragonTalonFX ( "mainWheel",RobotElementNames::MOTOR_CONTROLLER_USAGE::INTAKE_MECHANISM_MAIN_WHEEL,9,"rio" );
	pushSolenoid = new DragonSolenoid ( "pushSolenoid",RobotElementNames::SOLENOID_USAGE::INTAKE_MECHANISM_PUSH_SOLENOID,10,frc::PneumaticsModuleType::REVPH,1,false );

}

void frontIntake_gen::Initialize ( RobotConfigMgr::RobotIdentifier robotFullName )
{
	m_table = nt::NetworkTableInstance::GetDefault().GetTable ( m_ntName );
	m_table.get()->PutBoolean ( "Enable Tuning for frontIntake?", m_tuning );

	if ( false ) {}
	else if ( RobotConfigMgr::RobotIdentifier::CompBot_302 == robotFullName )
	{
		mainWheel->SetCurrentLimits ( false,
		                              units::current::ampere_t ( 0 ),
		                              false,
		                              units::current::ampere_t ( 0 ),
		                              units::current::ampere_t ( 0 ),
		                              units::time::second_t ( 0 ) );
// pushSolenoid : Solenoids do not have initialization needs
	}
	else if ( RobotConfigMgr::RobotIdentifier::PracticeBot_9900 == robotFullName )
	{
		mainWheel->SetCurrentLimits ( false,
		                              units::current::ampere_t ( 0 ),
		                              false,
		                              units::current::ampere_t ( 0 ),
		                              units::current::ampere_t ( 0 ),
		                              units::time::second_t ( 0 ) );
// pushSolenoid : Solenoids do not have initialization needs
	}

}