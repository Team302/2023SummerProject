
//====================================================================================================================================================
// Copyright 2023 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================



//==============================================================
// This file is auto generated by FRCrobotCodeGen302.exe Version $CODE_GENERATOR_VERSION$ 
// Changes to this file may cause incorrect behavior and will be lost when 
// the code is regenerated, unless the changes are delimited by:
//==============================================================


// FRC Includes
#include <networktables/NetworkTableInstance.h>

#include <mechanisms/Turret/Turret.h>

Turret::Turret(TALONSRX zAxis, double mainPID_pGain, double mainPID_iGain, double mainPID_dGain, double mainPID_fGain, double mainPID_iZone)
{
    m_zAxis = zAxis;
	m_mainPID_pGain = mainPID_pGain;
	m_mainPID_iGain = mainPID_iGain;
	m_mainPID_dGain = mainPID_dGain;
	m_mainPID_fGain = mainPID_fGain;
	m_mainPID_iZone = mainPID_iZone;
}

void Turret::Initialize()
{
    m_table = nt::NetworkTableInstance::GetDefault().GetTable(m_ntName);
    m_table.get()->PutBoolean("Enable Tuning for Turret?", m_tuning);
}

void Turret::Cyclic()
{
    CheckForTuningEnabled();
    if (m_tuning)
    {
        ReadTuningParamsFromNT();
    }
}

void Turret::CheckForTuningEnabled()
{
    bool pastTuning = m_tuning;
    m_tuning = m_table.get()->GetBoolean("Enable Tuning for Turret?", false);
    if (pastTuning != m_tuning && m_tuning == true)
    {
        PushTuningParamsToNT();
    }
}

void Turret::ReadTuningParamsFromNT()
{
    m_mainPID_pGain = m_table.get()->GetNumber("mainPID_pGain", m_mainPID_pGain);
	m_mainPID_iGain = m_table.get()->GetNumber("mainPID_iGain", m_mainPID_iGain);
	m_mainPID_dGain = m_table.get()->GetNumber("mainPID_dGain", m_mainPID_dGain);
	m_mainPID_fGain = m_table.get()->GetNumber("mainPID_fGain", m_mainPID_fGain);
	m_mainPID_iZone = m_table.get()->GetNumber("mainPID_iZone", m_mainPID_iZone);
}

void Turret::PushTuningParamsToNT()
{
    m_table.get()->PutNumber("mainPID_pGain", m_mainPID_pGain);
	m_table.get()->PutNumber("mainPID_iGain", m_mainPID_iGain);
	m_table.get()->PutNumber("mainPID_dGain", m_mainPID_dGain);
	m_table.get()->PutNumber("mainPID_fGain", m_mainPID_fGain);
	m_table.get()->PutNumber("mainPID_iZone", m_mainPID_iZone);
}