
//====================================================================================================================================================
// Copyright 2023 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================




//==============================================================
// This file is auto generated by FRCrobotCodeGen302.exe Version $CODE_GENERATOR_VERSION$ 
// Changes to this file may cause incorrect behavior and will be lost when 
// the code is regenerated, unless the changes are delimited by:
//==============================================================


#include <string>

#include "configs/RobotConfig1.h"
#include "configs/usages/CanSensorUsage.h"
#include "configs/usages/MotorControllerUsage.h"
#include "hw/DragonCanCoder.h"
#include "hw/DragonTalonFX.h"
#include "mechanisms/example/decoratormods/Example.h"
#include "mechanisms/example/generated/ExampleGen.h"

constexpr char canBusName[] = "Canivore";

using std::string;

void RobotConfig1::DefineMotorControllers()
{
    /*
        Will be repeated for each motor, needs to create new motor and configure according to data from GUI
        Can probably use a snippet
    */
    m_motor-IntakeMotor = new $$MOTOR_TYPE$$(string("$$MOTOR_NAME$$"),
                                        MotorControllerUsage::MOTOR_CONTROLLER_USAGE::$$MOTOR_NAME$$,
                      m_motor-IntakeMotor                  $$CAN_ID$$,
                                        string(canBusName));

m_motor-IntakeMotor->SetSensorInverted($$SENSOR_INVERTED$$);

m_motor-IntakeMotor->SetControlConstants(0, $$CONTROL_DATA$$);

m_motor-IntakeMotor->SetCurrentLimits($$ENABLE_STATOR_CURRENT_LIMIT$$,
                               $$STATOR_CURRENT_LIMIT$$,
                               $$ENABLE_SUPPLY_CURRENT_LIMIT$$,
                               $$SUPPLY_CURRENT_LIMIT$$,
                               $$SUPPLY_CURRENT_THRESHOLD$$,
                               $$SUPPLY_TIME_THRESHOLD$$);

m_motor-IntakeMotor->SetPIDConstants(0, $$KP$$, $$KI$$, $$KD$$, $$KF$$);

m_motor-IntakeMotor->ConfigHWLimitSW($$ENABLE_FORWARD$$,
                                $$REMOTE_FORWARD_ID$$,
                                $$FORWARD_RESET_POSITION$$,
                                $$FORWARD_POSITION$$,
                                $$FORWARD_TYPE$$,
                                $$FORWARD_OPEN_CLOSE$$,
                                $$ENABLE_RESERVE$$,
                                $$REMOTE_REVERSE_ID$$,
                                $$REVERSE_RESET_POSITION$$,
                                $$REVERSE_POSITION$$,
                                $$REVERSE_TYPE$$,
                                $$REVERSE_OPEN_CLOSE$$);

m_motor-IntakeMotor->ConfigMotorSettings($$INVERTED$$,
                                    $$MODE$$,
                                    $$DEADBAND_PERCENT$$,
                                    $$PEAK_FORWARD_DUTY_CYCLE$$,
                                    $$PEAK_REVERSE_DUTY_CYCLE$$);

//check if follower motor
//m_motor-IntakeMotor->SetAsFollowerMotor($$MASTER_CANID$$);

//check for remote sensor
//m_motor-IntakeMotor->SetRemoteSensor($$REMOTE_CANID$$, $$DEVICE_TYPE$$);

//fuse cancoder
//m_motor-IntakeMotor->FuseCancoder();
}

void RobotConfig1::DefineSolenoids()
{
    /*
        Will be repeated for each solenoid, needs to create new solenoid and configure according to data from GUI
        Can probably use a snippet
    */
    $$SOLENOID_DEFINITION$$
}

void RobotConfig1::DefineMechanisms()
{
    /*
        Will be repeated for each mechanism, need to create new generated mechanism and regular mechanism
        After, compose generated mechanism by calling appropriate functions (AddMotor(*m_motor1))
        Can probably use snippet
    */
    $$MECHANISM_DEFINITION$$
}

void RobotConfig1::DefineCANSensors()
{
    /*
        Will be repeated for each cancoder, needs to create new cancoder and configure according to data from GUI
        Can probably use a snippet
    */
    $$CANCODER_DEFINITION$$
}