plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2023.4.3"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Default enable simgui
wpi.sim.addGui().defaultEnabled = true
// Enable DS but not by default
wpi.sim.addDriverstation()

tasks.build.doLast() {
   def stdout = new ByteArrayOutputStream()

   exec {
     commandLine "git", "rev-parse", "HEAD"
     standardOutput = stdout
   }

   def commitHash = stdout.toString().trim()

    stdout = new ByteArrayOutputStream()
    exec {
      commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
      standardOutput = stdout
   }

   // Parse the output into a string
   def branch = stdout.toString().trim()

   new File(
      projectDir.toString() + "/src/main/utilities",
      "BuildDetails.txt"
   ).text = "Branch: (B)" + branch + "(B) "+ "\nCommit Hash: (H)" + commitHash + "(H)" + "\nTeam Number: (TN)" + project.frc.getTeamNumber() + "(TN)"

    println("Wrote details")
    if(ant.properties.answer == 'N' || ant.properties.answer == 'n')
    {
        println("Build was not successful even though it says that below.  Please rebuild")
    }
}

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            //check for version mismatch
            String lastBuildDetails = new File(projectDir.toString() + "/src/main/utilities/BuildDetails.txt").text

            String lastTeamNum = lastBuildDetails.takeBetween("(TN)")
            if(lastTeamNum.toInteger() != project.frc.getTeamNumber())
            {
                
                ant.input(message: 'Current team number does not match what code was built with, continue? Y/N:', addproperty: 'answer', defaultValue : 'N')
                def answer = ant.properties.answer
                if(answer == 'N' || answer == 'n')
                {
                    println("Answer was no")
                    return false
                }
            }

            sources.cpp {
                def cppDir = 'src/main/cpp/' //default will be comp bot, will make src/main/cpp/comp later
                switch(project.frc.getTeamNumber()){
                    case 302:
                        println("Building code for comp bot")
                        //don't need to set cppDir because it already points to comp bot
                        break;
                    case 2023:
                    case 2024:
                        cppDir='src/main/cpp/practice'
                        println("Building code for practice bot")
                        break;
                    case 1:
                        cppDir='src/main/cpp/thing1'
                        println("Building code for thing 1")
                        break;
                    case 2:
                        cppDir='src/main/cpp/thing2'
                        println("Building code for thing 2")
                    case 333:
                        cppDir='src/main/cpp/simulation'
                        println("Building code for simulation")
                        break;
                    default:
                        println("Team number not found, building code for comp bot")
                        //don't need to set cppDir because it already points to comp bot
                        break;
                }

                source {
                    srcDir cppDir
                    srcDir 'src/main/thirdparty'
                    include '**/*.cpp','**/*.cxx', '**/*.cc', '**/*.c'
                }
                exportedHeaders {
                    srcDir cppDir
                    srcDir 'src/main/thirdparty'
                    include '**/*.hpp', '**/*.hxx', '**/*.h'
                }
            }

            // Set deploy task to deploy this component
            deployArtifact.component = it

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            // Enable simulation for this component
            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}